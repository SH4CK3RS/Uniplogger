//
//  SplashInteractor.swift
//  UniPlogger
//
//  Created by 손병근 on 2020/11/24.
//  Copyright (c) 2020 손병근. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SplashPresntable: AnyObject {
    var listener: SplashPresentableListener? { get set }
}


protocol SplashRouting {
    var viewController: SplashViewControllable { get }
}

enum SplashListenerRequest {
    case main
    case tutorial
    case login
}

protocol SplashListener: AnyObject {
    func request(_ request: SplashListenerRequest)
}

final class SplashInteractor: SplashInteractable, SplashPresentableListener {
    var router: SplashRouting?
    var presenter: SplashPresntable?
    var listener: SplashListener?
    
    init(presenter: SplashPresntable) {
        self.presenter = presenter
        presenter.listener = self
    }
    
    func checkLogin() {
        if AuthManager.shared.userToken != nil,
           let user = AuthManager.shared.user {
            AuthAPI.shared.getUser(uid: user.id) { [weak self] response in
                guard let self else { return }
                switch response {
                case .success(let value):
                    if value.success, let user = value.data {
                        AuthManager.shared.user = user
                        self.listener?.request(.main)
                    } else {
                        self.processNotLogined()
                    }
                case .failure:
                    self.processNotLogined()
                }
            }
        } else {
            processNotLogined()
        }
    }
    
    func request(_ request: SplashPresentableListenerRequest) {
        switch request {
        case .viewDidLoad:
            AuthManager.shared.autoSave = true
            checkLogin()
        }
    }
    
    private func processNotLogined() {
        if !UserDefaults.standard.bool(forDefines: .hasTutorial) {
            listener?.request(.tutorial)
        } else {
            listener?.request(.login)
        }
    }
}
