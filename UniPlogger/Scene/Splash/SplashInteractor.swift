//
//  SplashInteractor.swift
//  UniPlogger
//
//  Created by 손병근 on 2020/11/24.
//  Copyright (c) 2020 손병근. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import RIBs

enum SplashRouterRequest {
    case routeToTutorial
    case detachTutorial
    case routeToLogin
    case detachLogin(completion: (() -> Void)?)
    case routeToRegistration(RegistrationEntryPoint)
    case detachRegistration(completion: (() -> Void)?)
    case routeToMain
}

protocol SplashRouting: ViewableRouting {
    func request(_ request: SplashRouterRequest)
}

protocol SplashPresntable: AnyObject {
    var listener: SplashPresentableListener? { get set }
}

final class SplashInteractor: PresentableInteractor<SplashPresntable>, SplashInteractable, SplashPresentableListener {
    weak var router: SplashRouting?
    
    override init(presenter: SplashPresntable) {
        super.init(presenter: presenter)
        presenter.listener = self
    }
    
    override func didBecomeActive() {
        super.didBecomeActive()
        
    }
    
    override func willResignActive() {
        super.willResignActive()
        
    }
    
    private func checkLogin() {
        if AuthManager.shared.userToken != nil,
           let user = AuthManager.shared.user {
            AuthAPI.shared.getUser(uid: user.id) { [weak self] response in
                guard let self else { return }
                switch response {
                case .success(let value):
                    if value.success, let user = value.data {
                        AuthManager.shared.user = user
                        self.router?.request(.routeToMain)
                    } else {
                        self.processNotLogined()
                    }
                case .failure:
                    self.processNotLogined()
                }
            }
        } else {
            processNotLogined()
        }
    }
    
    func request(_ request: SplashPresentableListenerRequest) {
        switch request {
        case .viewDidLoad:
            AuthManager.shared.autoSave = true
            checkLogin()
        }
    }
    
    private func processNotLogined() {
        if !UserDefaults.standard.bool(forDefines: .hasTutorial) {
            router?.request(.routeToTutorial)
        } else {
            router?.request(.routeToLogin)
        }
    }
}

// MARK: - TutorialRootListenerRequest
extension SplashInteractor {
    func request(_ request: TutorialRootListenerRequest) {
        router?.request(.detachTutorial)
        switch request {
        case .skip:
            router?.request(.routeToLogin)
        case let .next(nickname):
            router?.request(.routeToRegistration(.tutorial(nickname)))
        }
    }
}

// MARK: - LoginListenerRequest
extension SplashInteractor {
    func request(_ request: LoginListenerRequest) {
        switch request {
        case .loginFinished:
            router?.request(.detachLogin(completion: { [weak router] in
                router?.request(.routeToMain)
            }))
        case .registration:
            router?.request(.routeToRegistration(.login))
        case .findPassword:
            break
        }
    }
}

// MARK: - RegistrationListenerRequest
extension SplashInteractor {
    func request(_ request: RegistrationListenerRequest) {
        switch request {
        case .back:
            router?.request(.detachRegistration(completion: nil))
        case .close:
            router?.request(.detachRegistration(completion: { [weak router] in
                router?.request(.routeToLogin)
            }))
        case .registrationFinished:
            router?.request(.detachRegistration(completion: { [weak router] in
                router?.request(.routeToMain)
            }))
        }
    }
}
