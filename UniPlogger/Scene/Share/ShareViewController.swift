//
//  ShareViewController.swift
//  UniPlogger
//
//  Created by 바보세림이 on 2020/09/29.
//  Copyright (c) 2020 손병근. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit
import Then

protocol ShareDisplayLogic: class {
    func displaySomething(viewModel: Share.Something.ViewModel)
}

class ShareViewController: UIViewController, ShareDisplayLogic {
    var interactor: ShareBusinessLogic?
    var router: (NSObjectProtocol & ShareRoutingLogic & ShareDataPassing)?
    
    let imageView = PloggingImageView().then {
        $0.backgroundColor = .lightGray
        $0.layer.cornerRadius = 10
    }
    let dismissButton = UIButton().then {
        $0.setImage(UIImage(named: "share_dismiss"), for: .normal)
        $0.backgroundColor = UIColor(named: "dismissColor")
        $0.layer.cornerRadius = 20
    }
    let shareButton = UIButton().then {
        $0.setImage(UIImage(named: "share_instagram"), for: .normal)
        $0.backgroundColor = UIColor(named: "shareColor")
        $0.layer.cornerRadius = 50
    }

    // MARK: Object lifecycle
      
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = ShareInteractor()
        let presenter = SharePresenter()
        let router = ShareRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setUpView()
        setUpLayout()
    }

    func displaySomething(viewModel: Share.Something.ViewModel) {
        
    }
    
    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
        guard let view = touches.first?.view else { return }
        guard view == imageView else { return }
        imageViewTapped()
    }
    
    func imageViewTapped() {
        let picker = UIImagePickerController()
        picker.delegate = self
        picker.allowsEditing = true
        picker.sourceType = UIImagePickerController.SourceType.photoLibrary
        self.present(picker, animated: true, completion: nil)
    }
}

extension ShareViewController {
    private func configuration() {
    }
    
    private func setUpView() {
        [imageView, dismissButton, shareButton].forEach {
            self.view.addSubview($0)
            $0.translatesAutoresizingMaskIntoConstraints = false
        }
    }
    
    private func setUpLayout() {
        imageView.snp.makeConstraints {
            $0.width.height.equalTo(340)
            $0.centerX.equalToSuperview()
            $0.top.equalToSuperview().offset(179)
        }
        dismissButton.snp.makeConstraints {
            $0.width.height.equalTo(40)
            $0.top.equalToSuperview().offset(58)
            $0.trailing.equalToSuperview().offset(-16)
        }
        shareButton.snp.makeConstraints {
            $0.width.height.equalTo(100)
            $0.centerX.equalToSuperview()
            $0.bottom.equalToSuperview().offset(-114)
        }
    }
}

extension ShareViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        imageView.image = info[.originalImage] as? UIImage
        dismiss(animated: true, completion: nil)
    }
}
