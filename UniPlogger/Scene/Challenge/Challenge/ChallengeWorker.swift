//
//  ChallengeWorker.swift
//  UniPlogger
//
//  Created by 바보세림이 on 2020/10/26.
//  Copyright (c) 2020 손병근. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class ChallengeWorker {
    
    let storage = Storage()
    
//    func fetchTrashCan(completion: @escaping ([TrashCan]) -> Void){
//        storage.fetchTrashCanList { (result) in
//            switch result{
//            case .success(let list):
//                completion(list)
//            case .failure(let error):
//                print(error.localizedDescription)
//            }
//        }
//    }
//    
//    func fetchPlanet(completion: @escaping ([Planet]) -> Void){
//        storage.fetch { (result) in
//            switch result{
//            case .success(let list):
//                completion(list)
//            case .failure(let error):
//                print(error.localizedDescription)
//            }
//        }
    
    func addTrashCanList(list: [TrashCan], completion: @escaping ([TrashCan]) -> Void){
        storage.createTrashCanList(list) { (result) in
            switch result{
            case .success(let lis):
                completion(lis)
            case .failure(let error):
                print(error.localizedDescription)
                completion([])
            }
        }
    }
    
    func startChallenge(completion: @escaping ([Planet]) -> Void) {
        ChallengeAPI.shared.startChallenge(startDate: "2020-11-26", endDate: "2020-11-30", userCount: 1) { (result) in
            switch result {
            case .success(let data):
                print(data)
            case .failure(let error):
                let error = Common.CommonError.error(error)
                print(error)
                completion([])
            }
        }
    }
    
    func getPlanet(completion: @escaping (Planet) -> Void) {
        ChallengeAPI.shared.fetchPlanet { (response) in
            switch response {
            case .success(let data):
                print(data)
                AuthManager.shared.user?.planet = data
                completion(data!)
            case .failure(let error):
                print("error~~~~~~!")
                let error = Common.CommonError.error(error)
                print(error)
            }
        }
    }
//    func getTrashCanList(completion: @escaping ([TrashCan]) -> Void){
//        PloggingAPI.shared.fetchTrashList { (response) in
//            switch response{
//            case .success(let value):
//                self.fetchTrashCan { list in
//                    if let trashCanList = value{
//                        if list.isEmpty{
//                            // Toto add list
//                            self.addTrashCanList(list: trashCanList, completion: completion)
//                        }else{
//                            var createList: [TrashCan] = []
//                            trashCanList.forEach { item in
//                                if (list.filter { $0.latitude != item.latitude && $0.longitude == item.longitude}.count == 0){
//                                    createList.append(item)
//                                }
//                            }
//                            self.addTrashCanList(list: createList){ _ in
//                                createList.append(contentsOf: createList)
//                                completion(createList)
//                            }
//                        }
//                    }
//                }
//            case .failure(let error):
//                let error = Common.CommonError.error(error)
//                completion([])
//            }
//        }
//    }
}
