//
//  RegistrationPresenter.swift
//  UniPlogger
//
//  Created by 손병근 on 2020/12/05.
//  Copyright (c) 2020 손병근. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RegistrationPresentationLogic {
    func presentFetchNickname(response: Registration.FetchNickname.Response)
    func presentValidateAccount(response: Registration.ValidateAccount.Response)
    func presentValidatePassword(response: Registration.ValidatePassword.Response)
    func presentValidatePasswordConfirm(response: Registration.ValidatePasswordConfirm.Response)
    func presentValidateNickname(response: Registration.ValidateNickname.Response)
    
    
    func presentRegistration(response: Registration.Registration.Response)
}

class RegistrationPresenter: RegistrationPresentationLogic {
    weak var viewController: RegistrationDisplayLogic?
    var isValidAccount: Bool = false
    var isValidPassword: Bool = false
    var isValidPasswordConfirm: Bool = false
    var isValidNickname: Bool = false
    
    func presentFetchNickname(response: Registration.FetchNickname.Response) {
        let viewModel = Registration.FetchNickname.ViewModel(nickname: response.nickname)
        self.viewController?.displayFetchNickname(viewModel: viewModel)
    }
    
    func presentValidateAccount(response: Registration.ValidateAccount.Response){
        self.isValidAccount = response.isValid
        let viewModel = Registration.ValidationViewModel(isValid: isValidAccount && isValidPassword && isValidPasswordConfirm && isValidNickname)
        viewController?.displayValidation(viewModel: viewModel)
    }
    
    
    func presentValidatePassword(response: Registration.ValidatePassword.Response){
        self.isValidPassword = response.isValid
        let viewModel = Registration.ValidationViewModel(isValid: isValidAccount && isValidPassword && isValidPasswordConfirm && isValidNickname)
        viewController?.displayValidation(viewModel: viewModel)
    }
    
    func presentValidatePasswordConfirm(response: Registration.ValidatePasswordConfirm.Response){
        self.isValidPasswordConfirm = response.isValid
        let viewModel = Registration.ValidationViewModel(isValid: isValidAccount && isValidPassword && isValidPasswordConfirm && isValidNickname)
        viewController?.displayValidation(viewModel: viewModel)
    }
    
    func presentValidateNickname(response: Registration.ValidateNickname.Response) {
        self.isValidNickname = response.isValid
        let viewModel = Registration.ValidationViewModel(isValid: isValidAccount && isValidPassword && isValidPasswordConfirm && isValidNickname)
        viewController?.displayValidation(viewModel: viewModel)
    }
    
    func presentRegistration(response: Registration.Registration.Response) {
        guard let loginResponse = response.response, response.error == nil else {
            viewController?.displayError(error: response.error!, useCase: .Registration(response.request))
            return
        }
        viewController?.displayRegistration()
        
    }
}
