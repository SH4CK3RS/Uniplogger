//
//  PloggingInteractor.swift
//  UniPlogger
//
//  Created by 손병근 on 2020/09/27.
//  Copyright (c) 2020 손병근. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation
protocol PloggingBusinessLogic {
    func changeState(request: Plogging.ChangeState.Request)
    func startRun()
    func setupLocationService()
    func fetchTrashCan()
    func addTrashCan(request: Plogging.AddTrashCan.Request)
    func removeTrashCan(request: Plogging.RemoveTrashCan.Request)
}

protocol PloggingDataStore {
    //var name: String { get set }
}

class PloggingInteractor: NSObject, PloggingBusinessLogic, PloggingDataStore {
    var presenter: PloggingPresentationLogic?
    var worker = PloggingWorker()
    //var name: String = ""
    func changeState(request: Plogging.ChangeState.Request){
        switch request.state {
        case .ready:
            presenter?.presentDoing()
        case .doing:
            presenter?.presentPause()
        case .pause:
            //Todo 버튼 두개 중 어느걸 눌렀는지에 따라 분기
            print("pause")
        }
    }
    func startRun() {
        worker.delegate = self
        worker.startRun()
    }
    func setupLocationService() {
        worker.updateAuthorization = { status in
            let response = Plogging.LocationAuth.Response(status: status)
            DispatchQueue.main.async { [weak self] in
              self?.presenter?.presentLocationService(response: response)
            }
        }
        
    }
    func fetchTrashCan() {
        self.worker.fetchTrashCan { [weak self] (list) in
            let response = Plogging.FetchTrashCan.Response(list: list)
            self?.presenter?.presentFetchTrashCan(response: response)
        }
    }
    func addTrashCan(request: Plogging.AddTrashCan.Request) {
        self.worker.addTrashCan(request: request)
    }
    
    func removeTrashCan(request: Plogging.RemoveTrashCan.Request) {
        self.worker.deleteTrashCan(request: request)
    }
}

extension PloggingInteractor: PloggingWorkerDelegate{
    
    func updateRoute(distance: Measurement<UnitLength>, location: Location) {
        let response = Plogging.StartRun.Response(
            distance: distance,
            location: location
        )
        
        self.presenter?.presentStartRun(response: response)
    }
}
