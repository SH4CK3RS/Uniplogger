//
//  PloggingViewController.swift
//  UniPlogger
//
//  Created by 손병근 on 2020/09/27.
//  Copyright (c) 2020 손병근. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit
import Then
import MapKit

protocol PloggingDisplayLogic: class {
    func displayError(error: Common.CommonError, useCase: Plogging.UseCase)
    func displayStart()
}

class PloggingViewController: BaseViewController {
    var interactor: PloggingBusinessLogic?
    var router: (NSObjectProtocol & PloggingRoutingLogic & PloggingDataPassing)?
    
    var state: Plogging.State = .ready
    var counter = 0.0
    let startBottomContainerView = GradientView().then{
        $0.isHorizontal = true
        $0.colors = [.bottomGradientStart, .bottomGradientEnd]
        $0.locations = [0.0, 1.0]
    }
    
    let doingPauseBottomContainerView = GradientView().then{
        $0.isHorizontal = true
        $0.colors = [.bottomGradientStart, .bottomGradientEnd]
        $0.locations = [0.0, 1.0]
    }
    
    let distanceContainer = UIView().then{
        $0.backgroundColor = .clear
    }
    
    let distanceImageView = UIImageView().then{
        $0.image = UIImage(named: "ic_plogging_distance")
        $0.contentMode = .scaleAspectFit
    }
    
    let distanceLabel = UILabel().then{
        $0.font = .roboto(ofSize: 30, weight: .bold)
        $0.text = "0.00"
        $0.textColor = .white
    }
    
    let distanceUnitLabel = UILabel().then{
        $0.font = .roboto(ofSize: 20, weight: .bold)
        $0.text = "km"
        $0.textColor = .white
    }
    
    let timeContainer = UIView().then{
        $0.backgroundColor = .clear
    }
    
    let timeImageView = UIImageView().then{
        $0.image = UIImage(named: "ic_plogging_time")
        $0.contentMode = .scaleAspectFit
    }
    
    let timeLabel = UILabel().then{
        $0.font = .roboto(ofSize: 30, weight: .bold)
        $0.text = "00:00"
        $0.textColor = .white
    }
    
    let ploggerImageView = UIImageView().then {
        $0.image = #imageLiteral(resourceName: "ic_plogger.png")
        $0.contentMode = .scaleAspectFit
    }
    
    lazy var startButton = UIButton().then{
        $0.setTitle("START PLOGGING!", for: .normal)
        $0.titleLabel?.font = .roboto(ofSize: 16, weight: .bold)
        $0.backgroundColor = .main
        $0.layer.cornerRadius = 28
        $0.layer.masksToBounds = true
        $0.addTarget(self, action: #selector(startButtonTapped), for: .touchUpInside)
    }
    
    lazy var pauseButton = UIButton().then{
        $0.setTitle("잠시 멈춤", for: .normal)
        $0.titleLabel?.font = .roboto(ofSize: 16, weight: .bold)
        $0.backgroundColor = .main
        $0.layer.cornerRadius = 28
        $0.layer.masksToBounds = true
        $0.addTarget(self, action: #selector(startButtonTapped), for: .touchUpInside)
    }
    
    
  
    let bubbleView = UIView().then{
        $0.backgroundColor = UIColor(red: 0.769, green: 0.769, blue: 0.769, alpha: 1)
        $0.layer.cornerRadius = 10
        $0.layer.masksToBounds = true
    }
    
    let bubbleLabel = UILabel().then{
        $0.text = "준비물을 확인해주세요."
        $0.textColor = .white
        $0.font = .systemFont(ofSize: 14)
    }
    
    lazy var trashButton = UIButton().then{
        $0.setImage(UIImage(named: "ic_trashcan")?.withRenderingMode(.alwaysOriginal), for: .normal)
        $0.imageView?.contentMode = .center
        $0.backgroundColor = UIColor(red: 95/255, green: 116/255, blue: 244/255, alpha: 1)
        $0.layer.cornerRadius = 25
        $0.layer.masksToBounds = true
    }
    
    let mapView = MKMapView()
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = PloggingInteractor()
        let presenter = PloggingPresenter()
        let router = PloggingRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configuration()
        setupView()
        setupLayout()
    }
    
    @objc func startButtonTapped(){
        let reqquest = Plogging.ChangeState.Request(state: self.state)
        interactor?.changeState(request: reqquest)
    }
    
    
    @objc func UpdateTimer() {
        counter = counter + 0.1
        timeLabel.text = String(format: "%.1f", counter)
    }
}

extension PloggingViewController: PloggingDisplayLogic{
    func displayStart() {
        self.startBottomContainerView.isHidden = true
        self.doingPauseBottomContainerView.isHidden = false
        
        let timer = Timer.scheduledTimer(timeInterval: 0.1, target: self, selector: #selector(UpdateTimer), userInfo: nil, repeats: true)
        
        self.router?.routeToStartCounting()
    }
    func displayError(error: Common.CommonError, useCase: Plogging.UseCase){
        //handle error with its usecase
    }
}
