//
//  PloggingRecordViewController.swift
//  UniPlogger
//
//  Created by 손병근 on 2020/10/22.
//  Copyright (c) 2020 손병근. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Then

protocol PloggingRecordDisplayLogic: class {
    func displayError(error: Common.CommonError, useCase: PloggingRecord.UseCase)
}

class PloggingRecordViewController: UIViewController, PloggingRecordDisplayLogic {
    var interactor: PloggingRecordBusinessLogic?
    var router: (NSObjectProtocol & PloggingRecordRoutingLogic & PloggingRecordDataPassing)?
    
    
    // MARK: - Views
    lazy var skipButton = UIButton().then{
        $0.setTitle("SKIP", for: .normal)
        $0.titleLabel?.font = .roboto(ofSize: 15, weight: .bold)
        $0.setTitleColor(.init(red: 196, green: 196, blue: 196), for: .normal)
    }
    
    let recordContainer = UIView()
    
    let titleLabel = UILabel().then{
        $0.text = "오늘 무엇을 플로깅했나요?"
        $0.font = .notoSans(ofSize: 22, weight: .bold)
        $0.textAlignment = .center
    }
    
    lazy var collectionView = UICollectionView(frame: .zero, collectionViewLayout: UICollectionViewFlowLayout()).then {
        $0.dataSource = self
        $0.delegate = self
    }
    
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = PloggingRecordInteractor()
        let presenter = PloggingRecordPresenter()
        let router = PloggingRecordRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.configuration()
        self.setupView()
        self.setupLayout()
    }
    
    func displayError(error: Common.CommonError, useCase: PloggingRecord.UseCase){
        //handle error with its usecase
    }
}

extension PloggingRecordViewController: UICollectionViewDataSource{
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 9
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        .init()
    }
}

extension PloggingRecordViewController: UICollectionViewDelegate, UICollectionViewDelegateFlowLayout{
    
}
